##########################################################################################
### FileName: compileResult.py
### Author: Zhuozheng Shi
### Date: 10/25/2023
### Affiliation: UCLA Bogdan Lab
### Description: compile results from all chromosomes, draw association figure, draw Q-Q
###              plot, draw histogram, and compute a row for table
### Input: [out] output file path and name for figures and one row of table
###        [inputPath] input file path and prefix name for chromosomes pd.DataFrame file, 
###                    generated by computeChrom.py
###        [name] name displayed in figure title 
### Output: association list of pd.DataFrame, "{out}_assoc.zip", containing "L1_BETA", 
###         "L1_SE", "N", and "P"
###         association plot, "{out}_assoc.png"
###         Q-Q plot, "{out}_qqplot.png"
###         histogram, "{out}_histo.png"
##          row of table (conclusion), "{out}.npy", including lambda_gc and #hits
##########################################################################################


import matplotlib.pyplot as plt
import admix
import numpy as np
from admix.plot import compare_pval
from os.path import join
import pandas as pd
import math
import sys
import argparse
import openpyxl
import os
import statsmodels.api as sm
import statsmodels.formula.api as smf
import copy
import statsmodels
import time
import dask.array as da
import qtl
from qtl.plot import qqplot
import matplotlib.image as mpimg
from scipy import stats 
import re




parser = argparse.ArgumentParser()
parser.add_argument("-o", "--out",dest = "out")
parser.add_argument("-i", "--inputPath",dest = "inputPath")
parser.add_argument("-n", "--name",dest = "name")

args = parser.parse_args()

out = args.out
inputPath = args.inputPath
name = args.name



# read 22 separate chromosomes
chrCount = 22
dfs = []
for i in range(1,chrCount+1):

    dfs.append(pd.read_csv(f"{inputPath}_{i}_assoc.zip",compression='zip',index_col="id"))

df = pd.concat(dfs)
# save combined chromosomes
compression_opts = dict(method='zip',
                        archive_name=f'{name}_assoc.csv')  
df.to_csv(f"{out}_assoc.zip", index=True, index_label='id',
          compression=compression_opts)  




# construction list for making two-colored plot
chrn = []
for i in range(0,chrCount):
    for j in range(dfs[i].shape[0]):
        chrn.append(i+1)

# plot association mapping and save
fig, ax = plt.subplots( figsize=(5, 3), dpi=150)
admix.plot.manhattan(np.array(df.P), ax=ax, s=2,chrom=np.array(chrn),axh_y=-np.log10(5e-5))
plt.tight_layout()


plt.title(f"Association of {name}")
plt.savefig(f"{out}_assoc.png",bbox_inches='tight')
plt.close(fig)



# check whether association p values are nan
if np.isnan(np.array(df.sort_values(by=['P']).P)[0]) and np.isnan(np.array(df.sort_values(by=['P']).P)[-1]):
    # save wrong message if p values are nan
    with open(f'{out}_qqplot.txt', 'a') as the_file:
        the_file.write('Wrong')
    with open(f'{out}_histo.txt', 'a') as the_file:
        the_file.write('Wrong')
    print("Wrong")

else:
    #plot qqplot
    SNPs = df
    fig, ax = plt.subplots(figsize=(5, 5), dpi=150)
    ret = qqplot(list(SNPs["P"]),ax=ax,title=F"Q-Q plot of {name}")
    fig.savefig(f"{out}_qqplot.png",bbox_inches='tight')


    #plot histogram
    zscore = np.array(df["L1_BETA"])/np.array(df["L1_SE"])

    plt.figure(figsize=(15,10))
    plt.rcParams.update({'font.size': 22})
    plt.hist(zscore, bins=500,density=True) 
    x=np.linspace(-4,4,10000)
    y=stats.norm.pdf(x, 0, 1)
    plt.plot(x,y,color="orange")
    plt.title(f"Histogram of {name}")

    plt.savefig(f"{out}_histo.png",bbox_inches='tight')
    plt.close(fig)


# construct single row of table
temp = [name]

gc = admix.data.lambda_gc(np.array(list(SNPs.P)))
temp.append(gc)

t1 = df.P[df.P<5e-5]

temp.append(len(t1))

t2 = df.P[df.P<5e-4]

temp.append(len(t2))

np.save(f"{out}_tableRow",temp)